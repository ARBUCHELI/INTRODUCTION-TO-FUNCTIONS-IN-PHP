# INTRODUCTION TO PHP FUNCTIONS
-------------------------------

* Introduction
--------------
	We can think of programs as series of instructions to be performed by the computer. So far in each of our PHP programs, each step has been explicitly laid out in the order we want 
	it to happen.

	Sometimes we’ll have a group of actions we want to repeat in a program. In these situations, we could copy and paste the lines of code we want to run again, but this isn’t very 
	efficient. Instead, we should use functions.

	A function is a set of instructions we package as a unit, often with a name, so that we can reuse it. We define a function by writing out the series of steps that should happen 
	whenever we use the function. To use the function we call or invoke it.

	In this lesson, we’re going to start learning the syntax for defining and invoking PHP functions. We’ll start with simpler functions and work our way to more complex ones. If this 
	is your first time working with functions, it can feel like a big jump. Take your time and be patient with yourself.

==================================================================================================================================================================

* Defining Functions
--------------------
	Let’s get right to it and create our first function:

		function greetLearner()
		{
  			echo "Hello, Learner!\n";
  			echo "I hope you're enjoying PHP!\n";
  			echo "Love, Codecademy";
		}
	
	Let’s walk through the code above:

		. We used the function keyword to start our function definition.

		. We named the function greetLearner. Function names must start with a letter or underscore, followed by any number of letters, numbers, or underscores.

		. We created a code block with curly brackets ({ }). The code inside this code block will execute when our function is invoked.

		. Within that block we wrote three instructions: echo "Hello, Learner!\n!";, echo "I hope you're enjoying PHP!\n";, and echo "Love, Codecademy";

	With our greetLearner() function defined, we’ll be able to invoke the function multiple times and print those strings without having to copy or retype the three echo statements 
	again and again.

	A few notes on naming conventions: we typically snake case (separate words with underscores) our variable names, but, in order to easily tell the difference between variables and 
	functions in our code, we’ll do something different when naming functions. We’re going to use camel case for our function names—we’ll start with a lowercase letter and then 
	capitalize the first letter of every new word: camelCase vs. snake_case. Another good practice is to name functions in a way that describes what they do—typically we’ll start 
	function names with a verb.

	In the next exercise, we’ll show you how to invoke a function. For now, let’s get some practice defining them!

index.php
---------
<?php
// Write your code below:
  function praisePHP () {
    echo "PHP is awesome";
  }

==================================================================================================================================================================

* Invoking Functions
--------------------
	In our last exercise, we saw that when we define a function, the instructions within the code block aren’t executed. Defining a function only tells the computer to associate a 
	name with a set of instructions. To actually execute this code we’ll need in invoke, or call, the function. Invoking a function is the process of using a function that’s been 
	defined. Let’s look at an example:

		function greetLearner()
		{
  			echo "Hello, Learner!\n";
  			echo "I hope you're enjoying PHP!\n";
  			echo "Love, Codecademy";
		}
 
		greetLearner(); 
		/*
		Prints:
		Hello, Learner!
		I hope you're enjoying PHP!
		Love, Codecademy
		*/

	Below the definition of our greetLearner function, we invoked the function by writing its name followed by an opening and closing parenthesis (( )). This tells the computer to 
	grab the instructions specified in the function definition and execute them.

	When referring to functions outside of code or in comments, it’s conventional to refer to them by their name followed by parentheses (eg. greetLearner()), so we’ll be doing this 
	from now on.

	Let’s define and invoke some functions!

index.php
---------
<?php
// Write your code below:
function inflateEgo() {
  echo "You are a very good programmer";
}

inflateEgo();

inflateEgo();

==================================================================================================================================================================

* Return Statements
-------------------
	As we build more complicated functions, we’ll often be using them to process data. In order for the data to be useful, functions have the ability to return a value in addition to 
	performing instructions. Let’s look at an example:

		function countdown() 
		{
  			echo "4, 3, 2, 1, ";
  			return "blastoff!";
		}

	When the countdown() function is invoked it will print 4, 3, 2, 1,, but what about the string "blastoff!"? This value will be returned. We have a lot of options for what to do 
	with a returned value. For example, we could capture it in a variable:

		$return_value = countdown(); // Prints: 4, 3, 2, 1, 
		echo $return_value; // Prints: blastoff!

	This example is a little silly, since we could have just printed the string within the function, but, as we continue to create more complicated functions, the ability to return a 
	value will become extremely useful.

	Let’s get some practice returning a value from a function!

index.php
---------
<?php

// Write your code below:
function printStringReturnNumber() {
  echo "Hello Andres";
  return 10;
}

$my_num = printStringReturnNumber();

echo $my_num;

==================================================================================================================================================================
























